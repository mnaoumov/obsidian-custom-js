import typescript from '@rollup/plugin-typescript';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';

const isProd = (process.env.BUILD === 'production');

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/
`;

const cfg = {
  input: 'main.ts',
  output: {
    dir: isProd ? 'build' : '/Users/samlewis/Obsidian/Personal Notes/.obsidian/plugins/customjs/',
    sourcemap: 'inline',
    sourcemapExcludeSources: isProd,
    format: 'cjs',
    exports: 'default',
    banner,
  },
  external: ['obsidian'],
  plugins: [
    typescript({
      allowSyntheticDefaultImports: true
    }),
    nodeResolve({ browser: true }),
    commonjs(),
  ],
  onwarn: (warning, warn) => {
    // Quiet rollup warning about eval
    if (/Use of eval is strongly discouraged/.test(warning.message)) return;
    warn(warning);
  }
};

if (!isProd) {
  cfg.plugins.push(copy({
    targets: [
      { src: 'manifest.json', dest: '/Users/samlewis/Obsidian/Personal Notes/.obsidian/plugins/customjs/' },
      { src: 'styles.css', dest: '/Users/samlewis/Obsidian/Personal Notes/.obsidian/plugins/customjs/' },
    ]
  }))
}

export default cfg;